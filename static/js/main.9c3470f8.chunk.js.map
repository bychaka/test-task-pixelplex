{"version":3,"sources":["reducers/taskListReducer.js","reducers/taskTimerReducer.js","reducers/index.js","store/configureStore.js","components/AppHeader.js","components/ListItem.js","components/TaskOne.js","actions/tasksActions.js","components/TaskTwo.js","App.js","serviceWorker.js","index.js"],"names":["initialState","listItems","timerStep","rootReducer","combineReducers","list","state","arguments","length","undefined","action","type","newState","Object","assign","push","payload","timer","store","createStore","AppHeader","react_default","a","createElement","Navbar_default","bg","variant","Brand","href","src","width","className","alt","Nav_default","Link","target","Component","ListItem","ListGroup_default","Item","Button_default","TaskOne","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","items","addTextClickHandler","bind","assertThisInitialized","deleteTextClickHandler","console","log","refs","paragraf","map","value","key","id","textInput","addListItem","Date","Container_default","Row_default","Col_default","Form_default","Control","placeholder","ref","onClick","object","components_ListItem","data","connect","dispatch","item","deleteListItem","Handle","Slider","handle","dragging","index","restProps","objectWithoutProperties","rc_tooltip_es","prefixCls","overlay","visible","placement","TaskTwo","localStep","timerInterval","localStorage","getItem","parseInt","setTimerStep","counter","handleChange","timerStart","interval","_this2","clearInterval","setTimeout","setState","event","setItem","defaultStepValue","rc_slider_es","min","max","defaultValue","marks","0","5000","step","onChange","App","Fragment","components_AppHeader","components_TaskOne","components_TaskTwo","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c3470f8.chunk.js","sourcesContent":["export const initialState = {\r\n  listItems: []\r\n};\r\n\r\nexport const taskListReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_LIST_ITEM\": {\r\n      let newState = Object.assign({}, state);\r\n      newState.listItems.push(action.payload);\r\n      return Object.assign({}, newState);\r\n    }\r\n    case \"DELETE_LIST_ITEM\":\r\n      //еще тут запилить\r\n      return Object.assign({}, state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const initialState = {\r\n  timerStep: 500\r\n};\r\n\r\nexport const taskTimerReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_TIMER_STEP\":\r\n      return Object.assign({}, state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { taskListReducer } from \"./taskListReducer\";\r\nimport { taskTimerReducer } from \"./taskTimerReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  list: taskListReducer,\r\n  timer: taskTimerReducer\r\n});\r\n","import { createStore } from \"redux\";\r\nimport { rootReducer } from \"../reducers\";\r\n\r\nexport const store = createStore(rootReducer);\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"react-bootstrap/lib/Navbar\";\r\nimport Nav from \"react-bootstrap/lib/Nav\";\r\n\r\nclass AppHeader extends Component {\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"#\">\r\n          <img\r\n            src=\"https://image.ibb.co/k7cmVT/logo_w.png\"\r\n            width=\"200\"\r\n            className=\"d-inline-block align-top\"\r\n            alt=\"PixelPlex logo\"\r\n          />\r\n        </Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"/\">Home link</Nav.Link>\r\n          <Nav.Link href=\"https://pixelplex.io\" target=\"_blank\">\r\n            Pixelplex link\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppHeader;\r\n","import React, { Component } from \"react\";\r\n// import { connect } from \"react-redux\";\r\n// import { addListItem } from \"../actions/tasksActions\";\r\n// import { deleteListItem } from \"../actions/tasksActions\";\r\n\r\nimport Button from \"react-bootstrap/lib/Button\";\r\nimport ListGroup from \"react-bootstrap/lib/ListGroup\";\r\nimport \"./taskOne.css\";\r\n\r\nclass ListItem extends Component {\r\n  //   constructor(props) {\r\n  //     super(props);\r\n  //     this.state = { items: \"\" };\r\n  //     this.addTextClickHandler = this.addTextClickHandler.bind(this);\r\n  //     this.deleteTextClickHandler = this.deleteTextClickHandler.bind(this);\r\n  //     this.newList = this.newList.bind(this);\r\n  //   }\r\n\r\n  render() {\r\n    return (\r\n      <ListGroup.Item className=\"list-item\">\r\n        <p className=\"list-item-text\">1</p>\r\n        <Button\r\n          variant=\"outline-secondary\"\r\n          //   onClick={this.deleteTextClickHandler}\r\n        >\r\n          delete text\r\n        </Button>\r\n      </ListGroup.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListItem;\r\n","import React, { Component } from \"react\";\r\nimport Container from \"react-bootstrap/lib/Container\";\r\nimport { connect } from \"react-redux\";\r\nimport { addListItem } from \"../actions/tasksActions\";\r\nimport { deleteListItem } from \"../actions/tasksActions\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nimport Row from \"react-bootstrap/lib/Row\";\r\nimport Col from \"react-bootstrap/lib/Col\";\r\nimport Form from \"react-bootstrap/lib/Form\";\r\nimport Button from \"react-bootstrap/lib/Button\";\r\nimport ListGroup from \"react-bootstrap/lib/ListGroup\";\r\nimport \"./taskOne.css\";\r\n\r\nclass TaskOne extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { items: \"\" };\r\n    this.addTextClickHandler = this.addTextClickHandler.bind(this);\r\n    this.deleteTextClickHandler = this.deleteTextClickHandler.bind(this);\r\n  }\r\n\r\n  deleteTextClickHandler() {\r\n    console.log(\"delete text\", this.refs.paragraf);\r\n    this.props.list.map((value, key) => console.log(value.id, key));\r\n  }\r\n\r\n  addTextClickHandler() {\r\n    if (this.refs.textInput.value) {\r\n      console.log(\"olala\", this.refs.textInput.value);\r\n      this.props.addListItem({\r\n        id: +new Date(),\r\n        value: this.refs.textInput.value\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container className=\"task\">\r\n        <Row>\r\n          <Col>\r\n            <h3>Task #1</h3>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <div className=\"form-wrapper\">\r\n              <Form className=\"form\">\r\n                <Form.Control\r\n                  className=\"form-input\"\r\n                  placeholder=\"Enter text\"\r\n                  ref=\"textInput\"\r\n                />\r\n                <Button\r\n                  className=\"form-button\"\r\n                  variant=\"outline-secondary\"\r\n                  onClick={this.addTextClickHandler}\r\n                >\r\n                  Add text\r\n                </Button>\r\n              </Form>\r\n            </div>\r\n          </Col>\r\n          <Col>\r\n            <h4>List:</h4>\r\n            <ListGroup>\r\n              {this.props.list.map(object => {\r\n                return <ListItem data={object} />;\r\n              })}\r\n            </ListGroup>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    list: store.list.listItems\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addListItem: item => dispatch(addListItem(item)),\r\n  deleteListItem: item => dispatch(deleteListItem(item))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TaskOne);\r\n","export const addListItem = item => {\r\n  return {\r\n    type: \"ADD_LIST_ITEM\",\r\n    payload: item\r\n  };\r\n};\r\n\r\nexport const deleteListItem = item => {\r\n  return {\r\n    type: \"DELETE_LIST_ITEM\",\r\n    payload: item\r\n  };\r\n};\r\n\r\nexport const setTimerStep = step => {\r\n  return {\r\n    type: \"SET_TIMER_STEP\",\r\n    payload: step\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Container from \"react-bootstrap/lib/Container\";\r\nimport { connect } from \"react-redux\";\r\nimport { setTimerStep } from \"../actions/tasksActions\";\r\nimport Row from \"react-bootstrap/lib/Row\";\r\nimport Col from \"react-bootstrap/lib/Col\";\r\nimport Tooltip from \"rc-tooltip\";\r\nimport Slider from \"rc-slider\";\r\n\r\nimport \"./taskTwo.css\";\r\nimport \"rc-slider/assets/index.css\";\r\nimport \"rc-tooltip/assets/bootstrap.css\";\r\n\r\nconst Handle = Slider.Handle;\r\nconst handle = props => {\r\n  const { value, dragging, index, ...restProps } = props;\r\n  return (\r\n    <Tooltip\r\n      prefixCls=\"rc-slider-tooltip\"\r\n      overlay={value}\r\n      visible={dragging}\r\n      placement=\"top\"\r\n      key={index}\r\n    >\r\n      <Handle value={value} {...restProps} />\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nclass TaskTwo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let localStep = this.props.timerInterval;\r\n    if (localStorage.getItem(\"interval\")) {\r\n      localStep = parseInt(localStorage.getItem(\"interval\"));\r\n    }\r\n    this.props.setTimerStep({ timerStep: localStep });\r\n\r\n    this.state = { counter: 0 };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.timerStart = this.timerStart.bind(this);\r\n  }\r\n\r\n  timerStart(interval) {\r\n    clearInterval(this.timer);\r\n    this.timer = setTimeout(\r\n      () =>\r\n        this.setState({\r\n          counter: this.state.counter + interval\r\n        }),\r\n      interval\r\n    );\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.props.setTimerStep({ timerStep: event });\r\n    localStorage.setItem(\"interval\", event);\r\n  }\r\n\r\n  //   componentDidMount() {}\r\n\r\n  render() {\r\n    const defaultStepValue = this.props.timerInterval;\r\n    this.timerStart(defaultStepValue);\r\n\r\n    return (\r\n      <Container className=\"task\">\r\n        <Row>\r\n          <Col>\r\n            <h3>Task #2</h3>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"task-2-wrappper\">\r\n          <Col>\r\n            <div className=\"slider\">\r\n              <Slider\r\n                min={0}\r\n                max={5000}\r\n                defaultValue={defaultStepValue}\r\n                marks={{ 0: 0, 5000: 5000 }}\r\n                step={100}\r\n                handle={handle}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n          </Col>\r\n          <Col>\r\n            <h4>Counter:</h4>\r\n            <p>{this.state.counter}</p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    timerInterval: store.timer.timerStep\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setTimerStep: step => dispatch(setTimerStep(step))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TaskTwo);\r\n","import React, { Component } from \"react\";\nimport AppHeader from \"./components/AppHeader\";\nimport TaskOne from \"./components/TaskOne\";\nimport TaskTwo from \"./components/TaskTwo\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <AppHeader />\n        <TaskOne />\n        <TaskTwo />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./store/configureStore\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}